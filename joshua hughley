class TicTacToe:
    def __init__(self):
        # Initialize an empty board
        self.board = [0] * 9  # 0 represents an empty cell
        self.current_player = 1  # Player 1 starts (1 = X, 2 = O)

    def print_board(self):
        # Print the board in a readable format
        for i in range(3):
            row = self.board[i * 3:(i + 1) * 3]
            print(" | ".join(["X" if x == 1 else "O" if x == 2 else " " for x in row]))
            if i < 2:
                print("-" * 5)

    def is_valid_move(self, move):
        # Check if the move is valid (cell is empty)
        return self.board[move] == 0

    def make_move(self, move):
        # Make the move for the current player
        if self.is_valid_move(move):
            self.board[move] = self.current_player
            if self.check_win():
                print(f"Player {self.current_player} wins!")
                self.print_board()
                return True
            elif all(x != 0 for x in self.board):
                print("It's a draw!")
                self.print_board()
                return True
            # Switch players (1 -> 2, 2 -> 1)
            self.current_player = 3 - self.current_player
            return False
        else:
            print("Invalid move, try again!")
            return False

    def check_win(self):
        # Define the winning positions (rows, columns, diagonals)
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]              # Diagonals
        ]
        
        for combination in winning_combinations:
            if self.board[combination[0]] == self.board[combination[1]] == self.board[combination[2]] != 0:
                return True
        return False

# Initialize the game
game = TicTacToe()

# Play the game
game_over = False
while not game_over:
    game.print_board()
    move = int(input(f"Player {game.current_player}'s turn. Enter a move (0-8): "))
    game_over = game.make_move(move)
